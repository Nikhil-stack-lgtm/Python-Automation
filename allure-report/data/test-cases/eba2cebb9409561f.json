{"uid":"eba2cebb9409561f","name":"test_open_account","fullName":"seleniumbasicspytest.test_demo#test_open_account","historyId":"ebc811df55d4ee9ee3c19faf4ec4080f","time":{"start":1733121675205,"stop":1733121707269,"duration":32064},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00F933E3+25059]\n\t(No symbol) [0x00F1CDE4]\n\t(No symbol) [0x00DFBEC3]\n\t(No symbol) [0x00E3FBDD]\n\t(No symbol) [0x00E3FFCB]\n\t(No symbol) [0x00E7D952]\n\t(No symbol) [0x00E61F44]\n\t(No symbol) [0x00E7B51E]\n\t(No symbol) [0x00E61C96]\n\t(No symbol) [0x00E33FAC]\n\t(No symbol) [0x00E34F3D]\n\tGetHandleVerifier [0x01285543+3113795]\n\tGetHandleVerifier [0x0129A20A+3198986]\n\tGetHandleVerifier [0x012929E2+3168226]\n\tGetHandleVerifier [0x01033250+680016]\n\t(No symbol) [0x00F2572D]\n\t(No symbol) [0x00F229D8]\n\t(No symbol) [0x00F22B75]\n\t(No symbol) [0x00F157D0]\n\tBaseThreadInitThunk [0x76CEFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7765809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7765806E+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c33cfa531632f0a6cac87217c878e346\")>\nconfig = <configparser.ConfigParser object at 0x0000024935B0D790>\n\n    def test_open_account(driver, config):\n        url = config.get('demo', 'url')\n        username = config.get('demo', 'username')\n        password = config.get('demo', 'password')\n        driver.get(url)\n        driver.maximize_window()\n        time.sleep(10)\n        driver.find_element(By.XPATH, \"//input[@name='username']\").send_keys(username)\n        time.sleep(5)\n        driver.find_element(By.XPATH, \"//input[@name='password']\").send_keys(password)\n        time.sleep(5)\n        driver.find_element(By.XPATH, \"//input[@value='Log In']\").click()\n        time.sleep(10)\n        driver.find_element(By.XPATH, \"//a[normalize-space()='Open New Account']\").click()\n        driver.implicitly_wait(10)\n        dropdown = Select(driver.find_element(\"xpath\", \"//select[@id='type']\"))\n        dropdown.select_by_visible_text(\"SAVINGS\")\n    \n>       account = Select(driver.find_element(\"//select[@id='fromAccountId']\"))\n\nseleniumbasicspytest\\test_demo.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:766: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024935AE3C50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7765809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7765806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F933E3+25059]\nE       \t(No symbol) [0x00F1CDE4]\nE       \t(No symbol) [0x00DFBEC3]\nE       \t(No symbol) [0x00E3FBDD]\nE       \t(No symbol) [0x00E3FFCB]\nE       \t(No symbol) [0x00E7D952]\nE       \t(No symbol) [0x00E61F44]\nE       \t(No symbol) [0x00E7B51E]\nE       \t(No symbol) [0x00E61C96]\nE       \t(No symbol) [0x00E33FAC]\nE       \t(No symbol) [0x00E34F3D]\nE       \tGetHandleVerifier [0x01285543+3113795]\nE       \tGetHandleVerifier [0x0129A20A+3198986]\nE       \tGetHandleVerifier [0x012929E2+3168226]\nE       \tGetHandleVerifier [0x01033250+680016]\nE       \t(No symbol) [0x00F2572D]\nE       \t(No symbol) [0x00F229D8]\nE       \t(No symbol) [0x00F22B75]\nE       \t(No symbol) [0x00F157D0]\nE       \tBaseThreadInitThunk [0x76CEFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7765809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7765806E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1733121607015,"stop":1733121609357,"duration":2342},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"config","time":{"start":1733121609357,"stop":1733121609358,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"driver::0","time":{"start":1733121707423,"stop":1733121709602,"duration":2179},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"seleniumbasicspytest"},{"name":"suite","value":"test_demo"},{"name":"host","value":"DESKTOP-1L8REDS"},{"name":"thread","value":"12552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"seleniumbasicspytest.test_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"eba2cebb9409561f.json","parameterValues":[]}