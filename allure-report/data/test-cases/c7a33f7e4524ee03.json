{"uid":"c7a33f7e4524ee03","name":"test_upload_profile_pic","fullName":"seleniumbasicspytest.webautomation_test#test_upload_profile_pic","historyId":"2ab665795a8d4d9ff11f4e167e9b039e","time":{"start":1732856757135,"stop":1732856835663,"duration":78528},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary tab_items\n              \n              \n              css-1q2h7u5\" tabindex=\"-1\" type=\"button\" role=\"tab\" aria-selected=\"false\" id=\"simple-tab-1\" aria-controls=\"simple-tabpanel-1\">...</button> is not clickable at point (684, 235). Other element would receive the click: <div data-testid=\"cropper\" class=\"reactEasyCrop_CropArea reactEasyCrop_CropAreaRound reactEasyCrop_CropAreaGrid\" style=\"width: 200px; height: 200px;\"></div>\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x007133E3+25059]\n\t(No symbol) [0x0069CDE4]\n\t(No symbol) [0x0057BEC3]\n\t(No symbol) [0x005C5D37]\n\t(No symbol) [0x005C4189]\n\t(No symbol) [0x005C1DAD]\n\t(No symbol) [0x005C10AF]\n\t(No symbol) [0x005B5FD7]\n\t(No symbol) [0x005E1EFC]\n\t(No symbol) [0x005B5A24]\n\t(No symbol) [0x005E2194]\n\t(No symbol) [0x005FB51E]\n\t(No symbol) [0x005E1C96]\n\t(No symbol) [0x005B3FAC]\n\t(No symbol) [0x005B4F3D]\n\tGetHandleVerifier [0x00A05543+3113795]\n\tGetHandleVerifier [0x00A1A20A+3198986]\n\tGetHandleVerifier [0x00A129E2+3168226]\n\tGetHandleVerifier [0x007B3250+680016]\n\t(No symbol) [0x006A572D]\n\t(No symbol) [0x006A29D8]\n\t(No symbol) [0x006A2B75]\n\t(No symbol) [0x006957D0]\n\tBaseThreadInitThunk [0x7714FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7786809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7786806E+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"084e106973089df5615c945ed8d3de2e\")>\nconfig = <configparser.ConfigParser object at 0x00000292A8F71370>\n\n    def test_upload_profile_pic(driver, config):\n        # Load configuration\n        # config = ConfigParser()\n        # config.read('config.ini')\n    \n        # Retrieve URL from config\n        url = config.get('detail', 'url')\n        driver.maximize_window()\n        orgid = config.get('detail', 'orgid')\n        email = config.get('detail', 'email')\n        password = config.get('detail', 'password')\n        driver.get(url)\n        time.sleep(5)\n    \n        # Input organization ID\n        driver.find_element(By.XPATH, \"//input[@id='org_id']\").send_keys(orgid)\n    \n        # Input email\n        driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(email)\n    \n        # Input password\n        driver.find_element(By.XPATH, \"//input[@id='password']\").send_keys(password)\n    \n        # Click the \"Show Password\" button\n        driver.find_element(By.XPATH, \"//img[@aria-label='Show Password']\").click()\n    \n        # Click the \"Sign In\" button\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Sign In']\").click()\n        time.sleep(15)\n    \n        # Navigate to profile settings\n        driver.find_element(By.XPATH, \"//div[contains(@class,'header-profile-image')]\").click()\n        driver.find_element(By.XPATH, \"//span[normalize-space()='My Profile']\").click()\n        time.sleep(5)\n        driver.find_element(By.XPATH, \"//div[contains(@class,'cursor-pointer')]\").click()\n        time.sleep(5)\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Upload']\").click()\n        time.sleep(5)\n    \n        # Set file path to clipboard\n        file_path = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\cis-logo.png\"\n        pyperclip.copy(file_path)\n    \n        # Simulate Ctrl+V to paste the file path\n        pyautogui.keyDown('ctrl')  # Press Ctrl\n        pyautogui.press('v')  # Press V key\n        pyautogui.keyUp('ctrl')  # Release Ctrl key\n    \n        # Add delay for processing\n        time.sleep(10)\n    \n        # Simulate pressing Enter\n        pyautogui.press('enter')\n    \n        # Delay for file upload completion\n        time.sleep(10)\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Save']\").click()\n        time.sleep(20)\n    \n>       driver.find_element(By.XPATH, \"//button[@id='simple-tab-1']\").click()\n\nseleniumbasicspytest\\webautomation_test.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000292A8F71100>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7786809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7786806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary tab_items\nE                     \nE                     \nE                     css-1q2h7u5\" tabindex=\"-1\" type=\"button\" role=\"tab\" aria-selected=\"false\" id=\"simple-tab-1\" aria-controls=\"simple-tabpanel-1\">...</button> is not clickable at point (684, 235). Other element would receive the click: <div data-testid=\"cropper\" class=\"reactEasyCrop_CropArea reactEasyCrop_CropAreaRound reactEasyCrop_CropAreaGrid\" style=\"width: 200px; height: 200px;\"></div>\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x007133E3+25059]\nE       \t(No symbol) [0x0069CDE4]\nE       \t(No symbol) [0x0057BEC3]\nE       \t(No symbol) [0x005C5D37]\nE       \t(No symbol) [0x005C4189]\nE       \t(No symbol) [0x005C1DAD]\nE       \t(No symbol) [0x005C10AF]\nE       \t(No symbol) [0x005B5FD7]\nE       \t(No symbol) [0x005E1EFC]\nE       \t(No symbol) [0x005B5A24]\nE       \t(No symbol) [0x005E2194]\nE       \t(No symbol) [0x005FB51E]\nE       \t(No symbol) [0x005E1C96]\nE       \t(No symbol) [0x005B3FAC]\nE       \t(No symbol) [0x005B4F3D]\nE       \tGetHandleVerifier [0x00A05543+3113795]\nE       \tGetHandleVerifier [0x00A1A20A+3198986]\nE       \tGetHandleVerifier [0x00A129E2+3168226]\nE       \tGetHandleVerifier [0x007B3250+680016]\nE       \t(No symbol) [0x006A572D]\nE       \t(No symbol) [0x006A29D8]\nE       \t(No symbol) [0x006A2B75]\nE       \t(No symbol) [0x006957D0]\nE       \tBaseThreadInitThunk [0x7714FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7786809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7786806E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1732856632329,"stop":1732856635329,"duration":3000},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"config","time":{"start":1732856635329,"stop":1732856635333,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"driver::0","time":{"start":1732856876660,"stop":1732856878890,"duration":2230},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"seleniumbasicspytest"},{"name":"suite","value":"webautomation_test"},{"name":"host","value":"DESKTOP-1L8REDS"},{"name":"thread","value":"3692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"seleniumbasicspytest.webautomation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c7a33f7e4524ee03.json","parameterValues":[]}